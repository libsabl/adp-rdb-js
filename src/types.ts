// Copyright 2022 Joshua Honig. All rights reserved.
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.

import type { IContext } from '@sabl/context';
import type { ParamMap, ParamValue } from './db-api';
import type { Row } from './row';

/** Flags controlling how a model is mapped to SQL statements */
export enum MappingFlags {
  /** No mapping flags */
  none = 0x0,

  /** The Id field of the record is generated by the data store */
  generatedId = 0x1,

  /** Multiple fields of the record are generated by the data store on insert */
  generatedOnInsert = 0x2,

  /** One or more fields of the record are updated or generated on update */
  generatedOnUpdate = 0x4,
}

export function hasMappingFlag(
  flags: MappingFlags,
  flag: MappingFlags
): boolean {
  return (flags & flag) === flag;
}

/** A field mapper for a particular record type */
export interface RecordMapper<TRecord, TKey> {
  /** The mapping flags that apply to this record mapper */
  readonly flags: MappingFlags;

  /** Create a new instance of a record */
  create(): TRecord;

  /** Retrieve the key value or tuple from the record */
  getKey(record: TRecord): TKey;

  /** Set the key value or tuple on the record */
  setKey(record: TRecord, key: TKey): void;

  /** Load the attributes of the record from a data row */
  load(row: Row, record: TRecord): void;

  /** Get the parameters necessary to insert a record */
  getInsertParams(record: TRecord): ParamValue[];

  /** Get the parameters necessary to update a record */
  getUpdateParams(record: TRecord): ParamValue[];

  /** Get the parameters necessary to delete a record by its key value or tuple */
  getDeleteParams(record: TRecord): ParamValue[];
}

/** Provides reusable mechanics for RDB interactions to read and write models */
export interface SqlAdapter<TRecord> {
  /** Insert a record */
  insert(ctx: IContext, record: TRecord): Promise<void>;

  /** Update a record */
  update(ctx: IContext, record: TRecord): Promise<void>;

  /** Delete a record */
  delete(ctx: IContext, record: TRecord): Promise<void>;

  /** Select a single record based on the provided parameters */
  selectOne(ctx: IContext, params?: ParamMap): Promise<TRecord | null>;

  /** Select a single record using the provided SQL and parameters */
  selectOne(
    ctx: IContext,
    sql: string,
    params?: ParamMap
  ): Promise<TRecord | null>;

  /** Select all records in the repository */
  selectAll(ctx: IContext): AsyncIterable<TRecord>;

  /** Select multiple records based on the provided parameters */
  selectMany(ctx: IContext, params: ParamMap): AsyncIterable<TRecord>;

  /** Select multiple records using the provided SQL and parameters */
  selectMany(
    ctx: IContext,
    sql: string,
    params?: ParamMap
  ): AsyncIterable<TRecord>;
}

/** A service that can quote identifiers and generate simple where clauses */
export interface SqlFormatter {
  /** Builds a properly delimited identifier from the provided raw identifier parts */
  quoteIdentifier(...parts: string[]): string;

  /** Creates a SQL WHERE clause of the form `WHERE field1 = @field1 AND field2 = @field2` .. etc */
  whereFieldsSQL(...fields: string[]): string;
}

/** Provides SQL statement templates for a specific model type */
export interface SqlSource {
  /** Retrieve or generate the SQL DELETE statement for the model */
  getDeleteSQL(): string;

  /** Retrieve or generate the SQL INSERT statement for the record type */
  getInsertSQL(): string;

  /** Retrieve or generate the SQL UPDATE statement for the record type */
  getUpdateSQL(): string;

  /** Retrieve or generate the SQL SELECT statement to retrieve a record by its key value or tuple */
  getSelectKeySQL(): string;

  /** Retrieve or generate the SQL SELECT statement to retrieve records by the provided field names */
  getSelectSQL(...fields: string[]): string;
}
